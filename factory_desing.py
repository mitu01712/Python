# Factory Design pattern

# Step 1: ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ class ‡¶¨‡¶æ‡¶®‡¶æ‡¶á
# üëâ Step 1: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡ß©‡¶ü‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ class ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá

class Car:
    def show(self):
        print("This is a Car.")   # Car object ‡¶è‡¶∞ show() method

class Bike:
    def show(self):
        print("This is a Bike.")  # Bike object ‡¶è‡¶∞ show() method

class Truck:
    def show(self):
        print("This is a Truck.")  # Truck object ‡¶è‡¶∞ show() method
# üëâ Step 2: ‡¶è‡¶ï‡¶ü‡¶ø Factory class ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡ßá‡¶ü‡¶æ object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá

class vehicle_factory:
    def get_vehicle(vehicle_type):  # Factory method

        if vehicle_type == "car":
            return Car()       # ‡¶Ø‡¶¶‡¶ø "car" ‡¶ö‡¶æ‡¶ì, Car class ‡¶è‡¶∞ object return ‡¶ï‡¶∞‡ßã
        elif vehicle_type == "bike":
            return Bike()      # ‡¶Ø‡¶¶‡¶ø "bike" ‡¶ö‡¶æ‡¶ì, Bike class ‡¶è‡¶∞ object return ‡¶ï‡¶∞‡ßã
        elif vehicle_type == "truck":
            return Truck()     # ‡¶Ø‡¶¶‡¶ø "truck" ‡¶ö‡¶æ‡¶ì, Truck class ‡¶è‡¶∞ object return ‡¶ï‡¶∞‡ßã
        else:
            return ValueError("Unknown bike")  # ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¶‡¶ø‡¶≤‡ßá Error return ‡¶ï‡¶∞‡ßã
# üëâ Step 3: Factory method ‡¶¶‡¶ø‡ßü‡ßá object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã

# Object ‡¶§‡ßà‡¶∞‡¶ø
vehicle1 = vehicle_factory.get_vehicle("car")
vehicle2 = vehicle_factory.get_vehicle("bike")
vehicle3 = vehicle_factory.get_vehicle("truck")

# Method call (print() ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡ßü)
vehicle1.show()
vehicle2.show()
vehicle3.show()

"""
Factory Design Pattern ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶æ‡ßü‡¶ø‡¶§‡ßç‡¶¨ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶¨‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶õ‡ßá‡ßú‡ßá ‡¶¶‡¶ø‡¶á ‚Äî ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü (user) ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá‡¶á ‡¶®‡¶æ ‡¶™‡¶æ‡¶∞‡ßá ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

üîß ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶≤‡ßá:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶≤‡¶¨‡ßá ‚Äì
"‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ Car ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞" ‡¶¨‡¶æ "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ Bike ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞"
Factory ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶†‡¶ø‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡ßá‡•§
‚úÖ ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶ß‡¶∞‡ßã, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡¶æ‡¶°‡¶º‡¶ø‡¶∞ ‡¶∂‡ßã‡¶∞‡ßÅ‡¶Æ‡ßá ‡¶ó‡ßá‡¶õ‡ßã‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶≤‡ßã:
"‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡¶æ‡ßú‡¶ø ‡¶¶‡¶ø‡¶®"
"‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶æ‡¶á‡¶ï ‡¶¶‡¶ø‡¶®"
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßã‡¶® ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°, ‡¶ï‡ßã‡¶® ‡¶Æ‡¶°‡ßá‡¶≤, ‡¶ï‡ßã‡¶® ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏ ‚Äî ‡¶è‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶æ‡¶®‡ßã ‡¶®‡¶æ‡•§ ‡¶∂‡ßã‡¶∞‡ßÅ‡¶Æ‡ßá‡¶∞ ‡¶≤‡ßã‡¶ï ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶∂‡ßÅ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶†‡¶ø‡¶ï object ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡ßü‡•§
‡¶è‡¶ü‡¶æ‡¶á Factory Pattern‡•§
üîç ‡¶ï‡ßá‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü?
‡¶Ö‡¶®‡ßá‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã class ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡¶æ‡¶ï‡ßá ‡¶ï‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶∏‡ßá‡¶ü‡¶æ user-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á
Code clean, scalable & maintainable ‡¶π‡ßü
‡¶®‡¶§‡ßÅ‡¶® class ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá Factory method-‡¶è ‡ßß‡¶ü‡¶æ ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡ßú‡¶æ‡¶≤‡ßá‡¶á ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
Dependency ‡¶ï‡¶Æ‡¶æ‡ßü (loose coupling)
"""
