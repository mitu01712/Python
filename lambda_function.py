# anonymous function --> unNamed function anamika
# ei anonymous function user define function guloke choto kore dey
# print use kora jay ne 
# se only return kore
import functools
def square(x):
    return x*x
print(square(5))
# ei same jinish ta amra jokhon lambda_function diye korbo

#lambda arguments : expression
square = lambda x: x*x # ekhane lambda x holo lambda arguments : x*x holo expression
print(square(4))
# lambda function code ke choto kore fele

add = lambda a,b : a+b
print(add(1,2))

#  Python-ржПрж░ ржПржХржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржХржирж╕рзЗржкрзНржЯ ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ тАФ рж╕рзЗржЯрж┐ рж╣рж▓рзЛ list of tuples ржХрзЗ sort ржХрж░рж╛ред 

students = [('Rahim', 60) , ('Karim', 49), ('Fahim', 100)]
sorted_students = sorted(students, key = lambda x : x [1])
print(sorted_students)
# ржПржЦрж╛ржирзЗ students ржПржХржЯрж┐ list of tuplesред
# ржкрзНрж░рждрж┐ржЯрж┐ tuple-ржП ржжрзБржЯрзЛ ржЙржкрж╛ржжрж╛ржи ржЖржЫрзЗ:
# ржЫрж╛рждрзНрж░рзЗрж░ ржирж╛ржо (string)
# рждрж╛рж░ ржирж╛ржорзНржмрж╛рж░ ржмрж╛ рж╕рзНржХрзЛрж░ (integer)
# ЁЯФ╣ sorted() ржлрж╛ржВрж╢ржи ржПржХржЯрж╛ ржирждрзБржи sorted рж▓рж┐рж╕рзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ, ржпрзЗржЯрж┐ ржорзВрж▓ рж▓рж┐рж╕рзНржЯржХрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ ржирж╛ред

# ЁЯФ╣ ржПржЦрж╛ржирзЗ key = lambda x: x[1] ржПрж░ ржорж╛ржирзЗ рж╣рж▓:
# ржкрзНрж░рждрж┐ржЯрж┐ tuple-рж░ x рж╣рж┐рж╕рзЗржмрзЗ ржзрж░рж╛ рж╣ржЪрзНржЫрзЗред
# x[1] ржорж╛ржирзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ tuple-рж░ index 1  ржЙржкрж╛ржжрж╛ржи ржЕрж░рзНржерж╛рзО ржирж╛ржорзНржмрж╛рж░ ржХрзЗ ржзрж░рзЗ sort ржХрж░ржЫрж┐ред

# ржЙржжрж╛рж╣рж░ржг:
# 'Rahim' тЖТ 60
# 'Karim' тЖТ 49
# 'Fahim' тЖТ 100
# ржПржЗ рж╕рзНржХрзЛрж░ ржЕржирзБржпрж╛рзЯрзА sort ржХрж░рж▓рзЗ рж╕ржмржЪрзЗрзЯрзЗ ржХржо рж╕рзНржХрзЛрж░ ржЖржЧрзЗ ржЖрж╕ржмрзЗред

#map(), filter(), reduce()
#map() function protiti elements traverse kore ekta ekta new list or tuples return kore
# map() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рждрзБржорж┐ рж▓рж┐рж╕рзНржЯрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЙржкрж╛ржжрж╛ржирзЗ ржПржХржЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЛред
# ЁЯза ржоржирзЗ рж░рж╛ржЦрзЛ:
# рж╕ржмржЧрзБрж▓рзЛрж░ ржУржкрж░ ржПржХ ржХрж╛ржЬ тЖТ map()

# numbers = [1, 2, 3, 4]
#result = list(map(square korte chacchi, kar upor apply korte chacchi))

# result = list(map(lambda x: x * 2, numbers))
# print(result)# otuput [2, 4, 6, 8]





# filter() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рждрзБржорж┐ ржПржХржЯрж╛ рж▓рж┐рж╕рзНржЯ ржерзЗржХрзЗ ржХрж┐ржЫрзБ ржЖржЗржЯрзЗржо ржмрж╛ржЫрж╛ржЗ ржХрж░рждрзЗ ржкрж╛рж░рзЛ тАФ ржпрзЗржЧрзБрж▓рзЛ ржХрзЛржирзЛ рж╢рж░рзНржд ржкрзВрж░ржг ржХрж░рзЗред
# ЁЯза ржоржирзЗ рж░рж╛ржЦрзЛ:
# рж╢рж░рзНржд ржЕржирзБржпрж╛рзЯрзА ржХрж┐ржЫрзБ ржмрж╛ржЫрж╛ржЗ тЖТ filter()
numbers = [1, 2, 3, 4, 5, 6]
result = list(filter(lambda x: x % 2 == 0, numbers))
print(result)# output:[2, 4, 6]


# reduce() рж╕ржмржЧрзБрж▓рзЛ ржЙржкрж╛ржжрж╛ржи ржирж┐рзЯрзЗ ржПржХржЯрж╛рж░ ржкрж░ ржПржХржЯрж╛ ржорж┐рж▓рж┐рзЯрзЗ ржПржХржЯрж╛ рж░рзЗржЬрж╛рж▓рзНржЯ ржжрзЗрзЯред

# рждржмрзЗ reduce() ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп functools pakage ржерзЗржХрзЗ import ржХрж░рждрзЗ рж╣рзЯред
# ЁЯза ржоржирзЗ рж░рж╛ржЦрзЛ:
# рж╕ржм ржорж┐рж▓рж┐рзЯрзЗ ржПржХржЯрж╛ рж░рзЗржЬрж╛рж▓рзНржЯ тЖТ reduce()
# from functools import reduce
# numbers = [1, 2, 3, 4]
#result =functools.reduce(lambda x, y: x + y, numbers)
# print(result) #1+2 = 3, 3+3 = 6, 6+4 = 10 output hobe 10

#reduce
numbers = [1, 2, 3, 4]
sum =functools.reduce(lambda x,y : x+y, numbers)# ekhane functools use korte hobe
print(sum)
