# Hierarchical and Hybrid Inheritance

# Hierarchical Inheritance
# Multiple sub class ekta parent class ke inherite kore

class Vehicle:
    def engine_type(self):
        print("Vehicle has an engine")

class Car(Vehicle):
    def num_doors(self):
        print("Car has 4 doors")
    
class Truck(Vehicle):
     def load_capacity(self):
         print("Truck can carry 10 tons")

#same class ke jokhon multiple classes inherit kore tokhon amra bolbo hierarchical inheritance.
class Shape:
    def area(self):
        print("Calculating area.....")

class Polygon(Shape):
    def sides(self):
        print("Polygon has multiple sides.")

class Rectangle(Polygon):  
    def __init__(self, length, breadth):
        self.length = length
        self.breadth = breadth

    def area(self):
        return self.length * self.breadth

# Object creation
rec = Rectangle(10, 5)
rec.sides()  # From Polygon
print(rec.area())  # From Rectangle (overridden method)


"""
üî∑ Hierarchical Inheritance
‡¶Ö‡¶∞‡ßç‡¶•: ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï child class ‡¶è‡¶ï‡¶ü‡¶ø parent class ‡¶•‡ßá‡¶ï‡ßá inherit ‡¶ï‡¶∞‡ßá‡•§

üìò Structure:

        Parent
       /     \
   Child1   Child2
‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

class Animal:
    def sound(self):
        print("Animals make sound")

class Dog(Animal):
    def bark(self):
        print("Dog barks")

class Cat(Animal):
    def meow(self):
        print("Cat meows")

d = Dog()
d.sound()  # Output: Animals make sound
d.bark()   # Output: Dog barks

c = Cat()
c.sound()  # Output: Animals make sound
c.meow()   # Output: Cat meows
üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá Dog ‡¶è‡¶¨‡¶Ç Cat ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ‡¶á Animal ‡¶ï‡ßá inherit ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡ßá ‡¶¨‡¶≤‡ßá Hierarchical Inheritance.

üî∑ Hybrid Inheritance
‡¶Ö‡¶∞‡ßç‡¶•: ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï inheritance ‡¶ß‡¶∞‡¶£ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶ï‡ßá Hybrid Inheritance ‡¶¨‡¶≤‡ßá‡•§

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶è‡¶ï ‡¶ï‡ßã‡¶°‡ßá ‡¶Ø‡¶¶‡¶ø Multiple, Multilevel, ‡¶è‡¶¨‡¶Ç Hierarchical inheritances ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶Æ‡ßá‡¶∂‡¶æ‡¶®‡ßã ‡¶•‡¶æ‡¶ï‡ßá, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶π‡ßü Hybrid‡•§

üìò Structure:

       A
      / \
     B   C
      \ /
       D
‚úÖ ‡¶ï‡ßã‡¶° ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

class A:
    def method_A(self):
        print("Class A")

class B(A):
    def method_B(self):
        print("Class B")

class C(A):
    def method_C(self):
        print("Class C")

class D(B, C):
    def method_D(self):
        print("Class D")

obj = D()
obj.method_A()  # From A
obj.method_B()  # From B
obj.method_C()  # From C
obj.method_D()  # From D
üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ A ‚Üí B ‚Üí D, A ‚Üí C ‚Üí D ‚Äî ‡¶∏‡¶¨ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶æ‡¶ö‡ßç‡¶õ‡¶ø‡•§
‡¶è‡¶á ‡¶ß‡¶∞‡¶£‡ßá‡¶∞ ‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞ inheritance ‡¶ï‡ßá Hybrid Inheritance ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü‡•§

üîÑ ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ:
Inheritance Type	Structure	Description
Hierarchical	One parent ‚Üí multiple children	‡¶∏‡¶¨ child ‡¶è‡¶ï‡¶á parent ‡¶•‡ßá‡¶ï‡ßá inherit ‡¶ï‡¶∞‡ßá
Hybrid	Mix of multiple inheritance types	‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï inheritance system ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá
"""
