# Encapsulation and Abstraction


"""
ЁЯФР 1. Encapsulation (ржПржиржХрзНржпрж╛ржкрж╕рзБрж▓рзЗрж╢ржи) ржорж╛ржирзЗ ржХрзА?
Encapsulation ржорж╛ржирзЗ рж╣рж▓рзЛ
ЁЯСЙ рждржерзНржп (data) ржЖрж░ function (method)-ржХрзЗ ржПржХрж╕рж╛ржерзЗ ржкрзНржпрж╛ржХрзЗржЯ ржХрж░рзЗ рж░рж╛ржЦрж╛
ЁЯСЙ ржПржмржВ ржмрж╛ржЗрж░рзЗрж░ ржжрзБржирж┐рзЯрж╛ ржерзЗржХрзЗ рж▓рзБржХрж┐рзЯрзЗ рж░рж╛ржЦрж╛, ржпрзЗржи ржХрзЗржЙ рж╕рж░рж╛рж╕рж░рж┐ access ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рзЗред
ЁЯФ╕ ржорж╛ржирзЗ, ржнрж┐рждрж░рзЗрж░ ржЬрж┐ржирж┐рж╕ ржмрж╛ржЗрж░рзЗ ржерзЗржХрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ рж╕рж░рж╛рж╕рж░рж┐ред
ЁЯФ╕ ржПржЯрж┐ data-ржХрзЗ protect ржХрж░рзЗред
ЁЯФ╕ Python-ржП ржЖржорж░рж╛ __ (double underscore) ржжрж┐рзЯрзЗ private variable рждрзИрж░рж┐ ржХрж░рзЗ ржПржЯрж╛ ржХрж░рж┐ред
"""
class Student:
    def __init__(self, name, marks):
        self.name = name
        self.__marks = marks   # private variable

    def get_marks(self):
        return self.__marks

    def set_marks(self, marks):
        if marks >= 0:
            self.__marks = marks


s = Student("Mitu", 90)
print(s.get_marks()) #90
s.set_marks(95)
print(s.get_marks()) #95

# print(s.__marks) # ei vabe sosasori access korte parbo na amra 
#ЁЯСЙ ржПржЦрж╛ржирзЗ __marks ржмрж╛ржЗрж░рзЗрж░ ржерзЗржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ access ржХрж░рж╛ ржпрж╛рзЯ ржирж╛ред ржПржЯрж╛ржЗ Encapsulation


"""ЁЯОн 2. Abstraction (ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрж╢ржи) ржорж╛ржирзЗ ржХрзА?
Abstraction ржорж╛ржирзЗ рж╣рж▓рзЛ
ЁЯСЙ ржЬржЯрж┐рж▓ ржЬрж┐ржирж┐рж╕ржЧрзБрж▓рзЛ рж▓рзБржХрж┐рзЯрзЗ рж░рж╛ржЦрж╛, рж╢рзБржзрзБ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЬрж┐ржирж┐рж╕ржЧрзБрж▓рзЛ ржжрзЗржЦрж╛ржирзЛред

ЁЯФ╕ ржпрзЗржоржи рждрзБржорж┐ ржЧрж╛рзЬрж┐ ржЪрж╛рж▓рж╛ржУ тАФ
рждрзБржорж┐ ржЬрж╛ржирзЛ рж╕рзНржЯрж╛рж░рзНржЯ ржмрж╛ржЯржи, ржмрзНрж░рзЗржХ, ржЧрж┐рзЯрж╛рж░ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред
ржХрж┐ржирзНрждрзБ ржнрж┐рждрж░рзЗ ржЗржЮрзНржЬрж┐ржи ржХрж┐ржнрж╛ржмрзЗ ржШрзЛрж░рзЗ ржмрж╛ рждрзЗрж▓ ржХрж┐ржнрж╛ржмрзЗ ржмрж╛рж░рзНржи рж╣рзЯ тАФ ржУрж╕ржм ржЬрж╛ржирждрзЗ рж╣рзЯ ржирж╛ред

ЁЯФ╕ ржЕрж░рзНржерж╛рзО, ржЕржкрзНрж░рзЯрзЛржЬржирзАрзЯ details рж▓рзБржХрж┐рзЯрзЗ рж░рж╛ржЦрж╛ ржЖрж░ ржорзБржЦрзНржп ржмрж┐рж╖рзЯ ржжрзЗржЦрж╛ржирзЛржЗ abstractionред

ЁЯСЙ ржПржЦрж╛ржирзЗ Animal class-ржП рж╢рзБржзрзБ idea ржЖржЫрзЗ (sound() ржЖржЫрзЗ, ржХрж┐ржирзНрждрзБ body ржирж╛ржЗ)ред
ржЖрж╕рж▓ ржХрж╛ржЬ Dog, Cat class-ржПред
ржПржЯрж╛ржЗ Abstraction тАФ idea define ржХрж░рж╛, ржХрж╛ржЬ ржкрж░рзЗ child class-ржПред
"""
""""
#тЬЕ Python ржЙржжрж╛рж╣рж░ржг (abstract class ржжрж┐рзЯрзЗ):

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

class Dog(Animal):
    def sound(self):
        print("Dog says: Ghew Ghew")

class Cat(Animal):
    def sound(self):
        print("Cat says: Meow Meow")

# obj = Animal()  # Error! Abstract class instantiate ржХрж░рж╛ ржпрж╛рзЯ ржирж╛
d = Dog()
d.sound()   # Ghew Ghew"""


"""
ЁЯФ╖ Abstraction ржорж╛ржирзЗ ржХрзА?
ржЕржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЬрж┐ржирж┐рж╕ рж▓рзБржХрж┐рзЯрзЗ рж░рж╛ржЦрж╛, ржЖрж░ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЕржВрж╢ржЯрж╛ ржжрзЗржЦрж╛ржирзЛ тАФ ржПржЯрж╛ржХрзЗржЗ ржмрж▓рзЗ Abstractionред

ЁЯУ▒ ржпрзЗржоржи: рждрзБржорж┐ ржорзЛржмрж╛ржЗрж▓ ржжрж┐рзЯрзЗ ржХрж╛ржЙржХрзЗ ржХрж▓ ржжрж╛ржУ тАФ
рждрзБржорж┐ рж╢рзБржзрзБ dial ржмрж╛ржЯржи ржЪрж╛ржкрзЛ,
ржнрж┐рждрж░рзЗ ржорзЛржмрж╛ржЗрж▓ ржХрзАржнрж╛ржмрзЗ signal ржкрж╛ржарж╛ржЪрзНржЫрзЗ, call connect ржХрж░ржЫрзЗ тАФ рж╕рзЗржЧрзБрж▓рзЛ рждрзЛржорж╛рж░ ржЬрж╛ржирж╛рж░ ржжрж░ржХрж╛рж░ рж╣рзЯ ржирж╛ред
ЁЯза ржЕрж░рзНржерж╛рзО, user рж╢рзБржзрзБ ржжрж░ржХрж╛рж░рж┐ ржХрж╛ржЬ ржжрзЗржЦрзЗ, ржнрж┐рждрж░рзЗрж░ ржЬржЯрж┐рж▓рждрж╛ рж▓рзБржХрж╛ржирзЛ ржерж╛ржХрзЗред
ржПржЯрж╛ржЗ Abstractionред

ЁЯФ╢ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ-ржП Abstraction:
Python-ржП Abstraction ржХрж░рждрзЗ рж╣рж▓рзЗ abstract class ржЖрж░ abstract method ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рзЯред
"""

from abc import ABC, abstractmethod

# Abstract Class
class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass  # ржХрзЛржирзЛ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржирж╛, рж╢рзБржзрзБ design

# Subclass
class Cow(Animal):
    def sound(self):
        print("Cow says: Hamba")

class Dog(Animal):
    def sound(self):
        print("Dog says: Ghew Ghew")

# Object рждрзИрж░рж┐
c = Cow()
c.sound()   # Output: Cow says: Hamba

d = Dog()
d.sound()   # Output: Dog says: Ghew Ghew
"""
ЁЯФ╖ ржХрзЗржи ABC ржЖрж░ abstractmethod ржжрж░ржХрж╛рж░?
Python-ржП abstract class рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣рж▓рзЗ, ржЖржорж╛ржжрзЗрж░ ржмрж▓рждрзЗ рж╣рзЯ тАФ
тАЬржПржЗ ржХрзНрж▓рж╛рж╕ржЯрж╛ ржкрзБрж░рж╛ ржирзЯ, ржПржЯрж╛ рж╢рзБржзрзБ ржПржХржЯрж╛ design/templateредтАЭ
ржП ржЬржирзНржп Python-ржП ржПржХржЯрж┐ ржоржбрж┐ржЙрж▓ ржЖржЫрзЗ ржпрж╛рж░ ржирж╛ржо ЁЯСЙ abc (ржорж╛ржирзЗ: Abstract Base Class)


ЁЯдФ ржпржжрж┐ from abc import ржирж╛ ржжрж╛ржУ?
рждрж╛рж╣рж▓рзЗ abstract class ржмрж╛ abstract method ржХрж╛ржЬржЗ ржХрж░ржмрзЗ- ржирж╛ред Python ржмрзБржЭржмрзЗ ржирж╛ ржпрзЗ рждрзБржорж┐ ржХрзЛржиржЯрж╛ design-only ржЖрж░ ржХрзЛржиржЯрж╛ ржкрзВрж░рзНржг ржХрж╛ржЬрзЗрж░ methodред   
"""