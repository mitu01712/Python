# Association, Aggregation, Composition
#Student, Laptop
# Association example:
class Laptop:
    def __init__(self, brand):
        self.brand = brand

class Student:
    def __init__(self, name,laptop_obj):
        self.name = name
        self.laptop_v = laptop_obj
    
    def show_laptop_info(self):
        print(f"{self.name} has a laptop named {self.laptop_v.brand}")

lp1 = Laptop("ASUS")
student = Student("Rahim", lp1)
student.show_laptop_info()

# Aggregation (combination of multiple objects) eta holo has a relationship
# example: University has departments

class Department:
    def __init__(self, name):
        self.name = name

class University:
    def __init__(self, name):
        self.name = name
        self.departments = []
    def add_department(self, department):
        self.departments.append(department)
    
    def show_department(self):
        return [department.name for department in self.departments]

un1 = University("ABC University")
dep1 = Department("Proramming")
dep2 = Department("Math")
dep3 = Department("BBA")
dep4 = Department("English")
dep5 = Department("Bangla")
un1.add_department(dep1)
un1.add_department(dep2)
un1.add_department(dep3)
un1.add_department(dep4)
un1.add_department(dep5)

un1.show_department()
print(un1.show_department())



"""return [department.name for department in self.departments]
‡¶è‡¶ñ‡¶æ‡¶®‡ßá List Comprehension ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá, ‡¶≠‡ßá‡¶ô‡ßá ‡¶≠‡ßá‡¶ô‡ßá ‡¶¨‡ßÅ‡¶ù‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶Ø‡ßá‡¶® ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶ó‡ßá‡¶Å‡¶•‡ßá ‡¶Ø‡¶æ‡ßü‡•§ üòé

üîç ‡¶ß‡¶∞‡ßã ‡¶è‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶õ‡ßá:
self.departments = [dep1, dep2, dep3]
‡¶è‡¶¨‡¶Ç ‡¶è‡¶á dep1, dep2, dep3 ‡¶π‡¶≤ Department class-‡¶è‡¶∞ object‡•§
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶õ‡ßá .name ‡¶®‡¶æ‡¶Æ‡ßá property‡•§

üîΩ Example:

Object	name
dep1	"Programming"
dep2	"Math"
dep3	"BBA"

‡¶è‡¶ñ‡¶® ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶æ ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶õ‡ßá?
[department.name for department in self.departments]
‡¶è‡¶á‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá list comprehension:

üëâ ‡¶è‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßá:
‚Äúself.departments ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ department object ‡¶•‡ßá‡¶ï‡ßá department.name ‡¶®‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶®‡¶§‡ßÅ‡¶® list ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã‡•§‚Äù
"""

#Strong relationship
#Composition (eka oporke chara thakte pare na)
#car , engine

class Engine:
    def __init__(self, power):
        self.power = power
    
class Car:
    def __init__(self,brand,power ):
        self.brand = brand
        self.engine = Engine(power)# ekta car bananor sathe sathe engine assigne hoye jabe
        # bisoy ta emon car exised na korle engine o exised korbe na

    def show_details(self):
        print(f"{self.brand} has an engine with {self.engine.power} HP")

car = Car("Toyota", 100)
car.show_details()
"""
üîó 1. Association (‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï)
üß† ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡¶ï‡ßá ‡¶ö‡ßá‡¶®‡ßá‡•§
‡¶§‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá‡¶ì ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶®‡ßá‡¶á‡•§

üéì ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶è‡¶ï‡¶ú‡¶® ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶è‡¶ï‡¶ú‡¶® ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶ï‡ßá ‡¶™‡ßú‡¶æ‡¶®‡•§
‡¶§‡¶¨‡ßá ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶¨‡¶æ ‡¶õ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ü‡¶ø‡¶ï‡ßá ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

‚úÖ ‡¶ï‡ßã‡¶°:
class Teacher:
    def __init__(self, name):
        self.name = name

class Student:
    def __init__(self, name):
        self.name = name

# Association: ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡¶∞‡¶ø‡¶ö‡ßü
teacher1 = Teacher("Mr. Rahim")
student1 = Student("Karim")

print(f"{teacher1.name} teaches {student1.name}")
"""



#Aggregation
"""
‚ö™ 2. Aggregation (‡¶ú‡ßã‡ßú‡¶æ ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï)
üß† ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡ßú ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏ ‡¶õ‡ßã‡¶ü ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá,
‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶õ‡ßã‡¶ü ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏‡¶ü‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßá‡¶Å‡¶ö‡ßá ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

üéì ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü‡ßá ‡¶õ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶õ‡ßá‡•§
‡¶§‡¶¨‡ßá ‡¶õ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡ßá‡¶á ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü ‡¶õ‡¶æ‡ßú‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡¶§‡ßá‡¶ì ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

‚úÖ ‡¶ï‡ßã‡¶°:
class Student:
    def __init__(self, name):
        self.name = name

class University:
    def __init__(self, name):
        self.name = name
        self.students = []

    def add_student(self, student):
        self.students.append(student)

# Student ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ü‡¶õ‡ßá
student1 = Student("Karim")

# University student ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶õ‡ßá (Aggregation)
university1 = University("Dhaka University")
university1.add_student(student1)

print(f"{student1.name} studies at {university1.name}")
"""

"""
üü£ 3. Composition (‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï)
üß† ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
‡¶õ‡ßã‡¶ü ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏‡¶ü‡¶æ parent object ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ü‡¶ø‡¶ï‡ßá ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ‡•§
‡¶è‡¶ï‡¶ü‡¶æ object ‡¶Æ‡¶æ‡¶∞‡¶æ ‡¶ó‡ßá‡¶≤‡ßá ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ object ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ì ‡¶Æ‡¶æ‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

üéì ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá Bedroom ‡¶ì Kitchen ‡¶•‡¶æ‡¶ï‡ßá‡•§
‡¶¨‡¶æ‡ßú‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ò‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶ì ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶®‡¶æ‡•§

‚úÖ ‡¶ï‡ßã‡¶°:   
class Room:
    def __init__(self, name):
        self.name = name

class House:
    def __init__(self):
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá House ‡¶®‡¶ø‡¶ú‡ßá‡¶á Room ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá (Composition)
        self.bedroom = Room("Bedroom")
        self.kitchen = Room("Kitchen")

house1 = House()
print(f"The house has a {house1.bedroom.name} and a {house1.kitchen.name}")
üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá Room ‡¶ó‡ßÅ‡¶≤‡ßã House ‡¶è‡¶∞ ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ House ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá Room ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶®‡¶æ‡•§
"""